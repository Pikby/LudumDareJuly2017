<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum position
{
    STARTGAME,
    OPTIONS,
    CONTROLS,
}
alpha = 0
transitioning = false
curPosition = position.STARTGAME;
optionPosition = 0;
curRoom = position.STARTGAME;
volume = 0.5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(curRoom = position.STARTGAME)
{
    if(max(keyboard_check_pressed(ord('S')),keyboard_check_pressed(vk_down)))
    {
    audio_play_sound(sndMenuChange,10,false)
    curPosition++;
    if(curPosition&gt;position.CONTROLS) curPosition = position.STARTGAME; 
    }
    
    if(max(keyboard_check_pressed(ord('W')),keyboard_check_pressed(vk_up)))
    {
    audio_play_sound(sndMenuChange,10,false)
    curPosition--;
    if(curPosition&lt;position.STARTGAME) curPosition = position.CONTROLS; 
    }
    
    if(max(keyboard_check_released(vk_enter),keyboard_check_released(vk_space)))
    {
        switch(curPosition)
        {
            case(position.STARTGAME):
            {
                audio_play_sound(sndMenuPlay,10,false)
                transitioning = true
                break;
            }
            case(position.OPTIONS):
            {
                curRoom = position.OPTIONS
                break;
            }
        
        }
    
    }
}
else if(curRoom = position.OPTIONS)
{
    if(max(keyboard_check_pressed(ord('S')),keyboard_check_pressed(vk_down)))
    {
              audio_play_sound(sndMenuChange,10,false)
        if(optionPosition = 0) optionPosition = 1
        else optionPosition = 0
    }
    
    if(max(keyboard_check_pressed(ord('W')),keyboard_check_pressed(vk_up)))
    {
         audio_play_sound(sndMenuChange,10,false)
        if(optionPosition = 0) optionPosition = 1
        else optionPosition = 0
    }
    
    if(max(keyboard_check_pressed(ord('D')),keyboard_check_pressed(vk_right),keyboard_check_released(vk_enter)))
    {
        audio_play_sound(sndMenuChange,10,false)
        switch(optionPosition)
        {
            case(0):
            {
                if(volume &lt; 1) volume += 0.05
                audio_master_gain(volume)
                break
            }
            case(1):
            {
                curRoom = position.STARTGAME
                break;
            }
        
        }
    
    }
    if(max(keyboard_check_pressed(ord('A')),keyboard_check_pressed(vk_left)))
    {
         audio_play_sound(sndMenuChange,10,false)
        switch(optionPosition)
        {
            case(0):
            {
                if(volume &gt; 0) volume -= 0.05
                audio_master_gain(volume)
                break;
            }
            case(1):
            {
                curRoom = position.STARTGAME
                break;
            }
        
        }
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

if(transitioning = false) angle = sin(current_time/1000)*0.1
else angle = angle+0.2

if(curRoom = position.STARTGAME)
{
    if(curPosition = position.STARTGAME) draw_set_color(c_red)
    else draw_set_color(c_black)
    draw_text_ext_transformed(room_width/2, 300, "Start Game", 10, 300, 2, 2, radtodeg(angle))
    if(curPosition = position.OPTIONS) draw_set_color(c_red)
    else draw_set_color(c_black)
    draw_text_ext_transformed(room_width/2, 400, "Options", 10, 300, 2, 2, radtodeg(angle))
    if(curPosition = position.CONTROLS) draw_set_color(c_red)
    else draw_set_color(c_black)
    draw_text_ext_transformed(room_width/2, 500, "Controls", 10, 300, 2, 2, radtodeg(angle))
}
else if(curRoom = position.OPTIONS)
{
    if(optionPosition = 0) draw_set_color(c_red)
    else draw_set_color(c_black)
    draw_text_ext_transformed(room_width/2, 300, "Volume" + string(round(volume*100)), 10, 300, 2, 2, radtodeg(angle))
    if(optionPosition = 1) draw_set_color(c_red)
    else draw_set_color(c_black)
    draw_text_ext_transformed(room_width/2, 400, "Back", 10, 300, 2, 2, radtodeg(angle))
}

if(transitioning = true)
{
    draw_set_color(c_black)
    draw_set_alpha((alpha/100))
    alpha++
    
    if(alpha&gt;100) room_goto(rmTest)    
    draw_rectangle(0,0,room_width,room_height,false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
